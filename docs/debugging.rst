==============
Debugging Tips
==============

General tips
============

Normally Mesa (and OpenGL) records but does not notify the user of
errors. It is up to the application to call ``glGetError`` to check for
errors. Mesa supports an environment variable, ``MESA_DEBUG``, to help
with debugging. If ``MESA_DEBUG`` is defined, a message will be printed
to stdout whenever an error occurs.

More extensive error checking is done in DEBUG builds
(``--buildtype debug`` for Meson).

In your debugger you can set a breakpoint in ``_mesa_error()`` to trap
Mesa errors.

There is a display list printing/debugging facility. See the end of
``src/mesa/main/dlist.c`` for details.

Working with core dumps generated by CI
=======================================

Prerequisites
-------------
* Basic knowledge of `GDB <https://www.sourceware.org/gdb/>`__.
* Having installed package ``gdb-multiarch`` (applies for Debian).

Optional
~~~~~~~~
* Download debug version of used packages to get symbols outside of Mesa.

Download and preparation
------------------------
.. warning::
   We strip the Mesa build archive distributed to the runners from debugging symbols.

* **Root filesystem**, can be found in the registry image located at the beginning of the failed job or a rootfs archive for LAVA jobs.
* **Mesa build** ``mesa-*-unstripped.tar.zst`` and **Debug symbols** ``debug.dwp`` link located in the mesa build job log for a given architecture.
* **Core dump**, located in failed job artifacts.

.. note::
   Let's use the job running on architecture ``aarch64`` with crashing binary ``deqp/modules/gles2/deqp-gles2``
   and core dump named ``coredump-deqp-gles2.1673292159`` as an example.

Extract the content of the directory ``rootfs-arm64`` from the docker image into the working directory.
Then unpack ``mesa-arm64-unstripped.tar.zst`` also into the working directory.
Finally, put the core dump and symbols ``debug.dwp`` into the working directory.

Debugging
---------

.. code-block:: console

   $ cd your_working_directory
   $ export USER=your_gitlab_user  # or just "mesa"
   $ mkdir -p "builds/${USER}/mesa/"
   $ ln -s $(pwd)/install builds/${USER}/mesa
   $ find ./install/lib/ -name "*.so*" -print -exec ln debug.dwp '{}'.dwp ';'
   $ gdb-multiarch ./deqp/modules/gles2/deqp-gles2
   (gdb) set sysroot ./
   (gdb) core-file coredump-deqp-gles2.1673292159
   (gdb) bt
